# GitHub Actions workflow for Node.js 3-Tier App (frontend + backend)
# It checks for syntax errors in JS files during CI

name: 3-Tier GitHub Action CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Frontend compilation (syntax check)
        run: |
          cd client
          find . -name "*.js" -exec node --check {} \;

      - name: Backend compilation (syntax check)
        run: |
          cd api
          find . -name "*.js" -exec node --check {} \;

  gitleaks:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  

      - name: Gitleaks setup 
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}


      - name: Gitleaks scan
        run: |
          gitleaks detect --source ./client --exit-code 1
          gitleaks detect --source ./api --exit-code 1

  trivy_scan:
    runs-on: ubuntu-latest
    needs: gitleaks
    steps:
      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          format: table
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  sonarqube-frontend:
    runs-on: ubuntu-latest
    needs: trivy_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  

      - name: SonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: client
          args: >
            -Dsonar.projectKey=myorg_client
            -Dsonar.projectName=myorg_client
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  sonarqube-backend:
    runs-on: ubuntu-latest
    needs: trivy_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  

      - name: SonarQube Scan (api)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: api
          args: >
            -Dsonar.projectKey=myorg_api
            -Dsonar.projectName=myorg_api
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
  
  build_docker_image_backend:
    runs-on: ubuntu-latest
    needs: sonarqube-backend
    steps:
      
      - name: Checkout code   
        uses: actions/checkout@v4
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker build and push (Backend)
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: udaypagidimari/backend:latest
          file: ./api/Dockerfile
  
  build_docker_image_frontend:
    runs-on: ubuntu-latest
    needs: sonarqube-frontend
    steps:
      - name: Checkout code   
        uses: actions/checkout@v4
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker build and push (Frontend)
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: udaypagidimari/frontend:latest
          file: ./client/Dockerfile

  trivy-image-scan:
    runs-on: ubuntu-latest
    needs: build_docker_image_frontend
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: scanning frontend image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: udaypagidimari/frontend
          format: table
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          
      - name: scanning backen image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: udaypagidimari/backend
          format: table
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  deploy_to_kubernetes:
    runs-on: ubuntu-latest
    needs: trivy-image-scan
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install aws cli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt install unzip -y
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: setup kubectl setup
        uses: azure/setup-kubectl@v3
        with: 
          version: latest
      - name: configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.EKS_KUBECONFIG }} " > $HOME/.kube/config
      - name: Deplot to EKS
        run: |
          kubectl apply -f k8s-prod/sc.yaml
          kubectl apply -f k8s-prod/mysql.yaml
          kubectl apply -f k8s-prod/backend.yaml
          kubectl apply -f k8s-prod/frontend.yaml
          kubectl apply -f k8s-prod/ci.yaml
          kubectl apply -f k8s-prod/ingress.yaml
  
