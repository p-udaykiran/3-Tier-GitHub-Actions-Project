# GitHub Actions workflow for Node.js 3-Tier App (frontend + backend)
# It checks for syntax errors in JS files during CI

name: 3-Tier GitHub Action CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
      - name: Frontend compilation (syntax check)
        run: |
          cd client
          find . -name "*.js" -exec node --check {} \;
      - name: Backend compilation (syntax check)
        run: |
          cd api
          find . -name "*.js" -exec node --check {} \;

  
  gitleaks:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  
      - name: gitleaks setup 
        uses: gitleaks/gitleaks-action@v2

      - name: gitleaks scann
        run: |
          gitleaks detect --source ./client --exit-code 1
          gitleaks detect --source ./api --exit-code 1
  trivy_scan:
    runs-on: ubuntu-latest
    needs:  gitleaks
    steps:
      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: table
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  sonarqube-frontend:
    runs-on: ubuntu-latest
    needs: trivy_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  
      - name : sonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: client
          args: >
            - Dsonar.projectKey=myorg_client
            - Dsonar.projectName=myorg_client
            - Dsonar.source=.
            - Dsonar.exclusion=**/node_module/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${ { secrets.SONAR_TOKEN } }
          SONAR_URL: ${ { secrets.SONAR_URL } }
  sonarqube-baackend:
    runs-on: ubuntu-latest
    needs: trivy_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  
      - name : sonarQube Scan (backend)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: api
          args: >
            - Dsonar.projectKey=myorg_client
            - Dsonar.projectName=myorg_client
            - Dsonar.source=.
            - Dsonar.exclusion=**/node_module/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${ { secrets.SONAR_TOKEN } }
          SONAR_URL: ${ { secrets.SONAR_URL } }
